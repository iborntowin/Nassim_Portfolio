"use client";

import React, { useState, useRef, useEffect, useCallback } from "react";
import { cn } from "@/lib/utils";
import { motion as m, AnimatePresen        <m.div
          initial={{ opacity: 0, y: 30 }}
          animate={isInView ? { opacity: 1, y: 0 } : {}}
          transition={{ duration: shouldReduceMotion ? 0.3 : 0.6, delay: delay + 0.1 }}
          className="relative z-10 mb-6"seReducedMotion, useInView, useMotionValue, useSpring, useTransform } from "framer-motion";
import { Star, Sparkles, Zap, ArrowRight, Quote as QuoteIcon, Users, Award, TrendingUp, Play, Pause } from "lucide-react";

interface Testimonial {
  src: string;
  quote: string;
  name: string;
  designation?: string;
}

// Enhanced testimonials data
export const testimonials: Testimonial[] = [
  {
    name: "James Sullivan",
    quote: "Nassim's work on our session management platform was exceptional. His attention to detail and technical expertise delivered exactly what we needed.",
    src: "/images/avatars/avatar-1.png",
    designation: "CTO, TechFlow Solutions",
  },
  {
    name: "Amira Mansouri",
    quote: "The AI component detection system Nassim built has revolutionized our electronics manufacturing process. Incredible accuracy and performance.",
    src: "/images/avatars/avatar-2.png",
    designation: "Engineering Manager, ElectroTech",
  },
  {
    name: "Robert Kim",
    quote: "Working with Nassim on our embedded systems project was a game-changer. His expertise in C++ and hardware integration is outstanding.",
    src: "/images/avatars/avatar-3.png",
    designation: "Senior Hardware Engineer, IoT Innovations",
  },
  {
    name: "Lisa Martinez",
    quote: "Nassim's full-stack development skills are impressive. He delivered a robust, scalable solution that exceeded our expectations.",
    src: "/images/avatars/avatar-4.png",
    designation: "Product Manager, StartupHub",
  },
  {
    name: "Samuel Thompson",
    quote: "The productivity tools Nassim developed have significantly improved our team's workflow. Clean code, great documentation, excellent results.",
    src: "/images/avatars/avatar-5.png",
    designation: "Development Team Lead, CodeCraft",
  },
  {
    name: "Diana Wilson",
    quote: "Nassim's machine learning expertise helped us implement computer vision solutions we didn't think were possible. Truly innovative work.",
    src: "/images/avatars/avatar-6.png",
    designation: "AI Research Director, VisionTech",
  },
  {
    name: "Michael Johnson",
    quote: "The contract management system Nassim built has streamlined our entire business process. Professional, efficient, and user-friendly.",
    src: "/images/avatars/avatar-7.png",
    designation: "Operations Director, BusinessFlow",
  },
  {
    name: "Nancy Kim",
    quote: "Nassim's ability to work across different technologies - from Spring Boot to Svelte - makes him an invaluable full-stack developer.",
    src: "/images/avatars/avatar-8.png",
    designation: "Technical Project Manager, WebSolutions",
  },
  {
    name: "Peter Lee",
    quote: "The embedded communication system Nassim developed achieved performance gains we didn't expect. Excellent engineering and optimization.",
    src: "/images/avatars/avatar-9.png",
    designation: "Systems Architect, SpaceTech",
  },
  {
    name: "Quinn Rodriguez",
    quote: "Nassim's work on our AI-powered analytics platform has saved us countless hours. His technical skills and problem-solving are top-notch.",
    src: "/images/avatars/avatar-10.png",
    designation: "Data Science Manager, AnalyticsPro",
  },
  {
    name: "Tina Underwood",
    quote: "Professional, reliable, and technically excellent. Nassim delivered our desktop application on time and with exceptional quality.",
    src: "/images/avatars/avatar-11.png",
    designation: "Software Consultant, TechAdvice",
  },
  {
    name: "Victor Williams",
    quote: "The signal processing algorithms Nassim implemented for our EEG system are impressive. Great understanding of complex technical requirements.",
    src: "/images/avatars/avatar-12.png",
    designation: "Biomedical Engineer, HealthTech",
  },
];

// Futuristic Card Component
interface FuturisticCardProps {
  testimonial: Testimonial;
  delay?: number;
}

const FuturisticCard = ({ testimonial, delay = 0 }: FuturisticCardProps) => {
  const shouldReduceMotion = useReducedMotion();
  const cardRef = useRef(null);
  const isInView = useInView(cardRef, { once: true, margin: "-20px" });
  const [isHovered, setIsHovered] = useState(false);
  
  // Mouse position for interactive effects
  const mouseX = useMotionValue(0);
  const mouseY = useMotionValue(0);
  const rotateX = useSpring(useTransform(mouseY, [-0.5, 0.5], [10, -10]));
  const rotateY = useSpring(useTransform(mouseX, [-0.5, 0.5], [-10, 10]));

  const handleMouseMove = useCallback((e: React.MouseEvent) => {
    if (shouldReduceMotion) return;
    const rect = e.currentTarget.getBoundingClientRect();
    const centerX = rect.left + rect.width / 2;
    const centerY = rect.top + rect.height / 2;
    mouseX.set((e.clientX - centerX) / rect.width);
    mouseY.set((e.clientY - centerY) / rect.height);
  }, [mouseX, mouseY, shouldReduceMotion]);

  const handleMouseLeave = useCallback(() => {
    mouseX.set(0);
    mouseY.set(0);
    setIsHovered(false);
  }, [mouseX, mouseY]);

  return (
    <m.div
      ref={cardRef}
      initial={{ opacity: 0, y: 30, scale: 0.9 }}
      animate={isInView ? { opacity: 1, y: 0, scale: 1 } : {}}
      transition={{ 
        duration: shouldReduceMotion ? 0.3 : 0.6, 
        delay,
        ease: "easeOut"
      }}
      style={shouldReduceMotion ? {} : { rotateX, rotateY, transformPerspective: 1000 }}
      className="group relative"
      onMouseMove={handleMouseMove}
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={handleMouseLeave}
    >
      {/* Holographic Border Effect */}
      <div className="absolute -inset-0.5 bg-gradient-to-r from-blue-500 via-purple-500 to-blue-500 rounded-2xl opacity-0 group-hover:opacity-30 transition-opacity duration-500 blur-sm" />
      
      {/* Main Card */}
      <div className="relative p-8 rounded-2xl bg-gradient-to-br from-gray-900/80 to-black/80 border border-gray-700 backdrop-blur-sm overflow-hidden group-hover:border-blue-500/30 transition-all duration-500">
        
        {/* Animated Background Pattern */}
        <div className="absolute inset-0 opacity-5 group-hover:opacity-10 transition-opacity duration-500">
          <div className="absolute inset-0 bg-[radial-gradient(circle_at_50%_50%,#3b82f6_1px,transparent_1px)] bg-[size:20px_20px] animate-pulse" />
        </div>

        {/* Quote Icon */}
        <motion.div
          initial={{ scale: 0, rotate: -180 }}
          animate={isInView ? { scale: 1, rotate: 0 } : {}}
          transition={{ duration: shouldReduceMotion ? 0.3 : 0.5, delay: delay + 0.2 }}
          className="absolute top-4 right-4 w-8 h-8 rounded-full bg-gradient-to-r from-blue-500 to-purple-500 flex items-center justify-center group-hover:scale-110 transition-transform duration-300"
        >
          <QuoteIcon className="w-4 h-4 text-white" />
        </motion.div>

        {/* Quote Text */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={isInView ? { opacity: 1, y: 0 } : {}}
          transition={{ duration: shouldReduceMotion ? 0.3 : 0.6, delay: delay + 0.1 }}
          className="relative z-10 mb-6"
        >
          <p className="text-gray-100 font-medium leading-relaxed text-sm group-hover:text-blue-300 transition-colors duration-300">
            "{testimonial.quote}"
          </p>
        </motion.div>

        {/* Author Section */}
        <motion.div
          initial={{ opacity: 0, x: -20 }}
          animate={isInView ? { opacity: 1, x: 0 } : {}}
          transition={{ duration: shouldReduceMotion ? 0.3 : 0.5, delay: delay + 0.3 }}
          className="flex items-center gap-4 relative z-10"
        >
          {/* Avatar */}
          <div className="relative">
            <motion.div
              className="w-12 h-12 rounded-full bg-gradient-to-br from-blue-500 to-purple-500 p-0.5 group-hover:scale-110 transition-transform duration-300"
              whileHover={shouldReduceMotion ? {} : { rotate: 360 }}
              transition={{ duration: 0.8 }}
            >
              <div className="w-full h-full rounded-full bg-gray-800 flex items-center justify-center text-gray-100 font-bold text-sm">
                {testimonial.name.split(' ').map(n => n[0]).join('')}
              </div>
            </motion.div>
            
            {/* Status Indicator */}
            <motion.div
              className="absolute -bottom-1 -right-1 w-4 h-4 rounded-full bg-gradient-to-r from-green-400 to-emerald-500 border-2 border-gray-800"
              animate={shouldReduceMotion ? {} : { scale: [1, 1.2, 1] }}
              transition={{ duration: 2, repeat: Infinity }}
            />
          </div>

          {/* Author Info */}
          <div className="flex-1">
            <motion.h4 
              className="text-gray-100 font-semibold text-sm group-hover:text-blue-300 transition-colors duration-300"
              whileHover={shouldReduceMotion ? {} : { x: 5 }}
            >
              {testimonial.name}
            </motion.h4>
            <p className="text-gray-400 text-xs leading-tight">
              {testimonial.designation}
            </p>
          </div>

          {/* Rating Stars */}
          <motion.div
            className="flex gap-1"
            initial={{ opacity: 0, scale: 0 }}
            animate={isInView ? { opacity: 1, scale: 1 } : {}}
            transition={{ duration: shouldReduceMotion ? 0.3 : 0.5, delay: delay + 0.4 }}
          >
            {[...Array(5)].map((_, i) => (
              <motion.div
                key={i}
                initial={{ opacity: 0, rotate: -180 }}
                animate={isInView ? { opacity: 1, rotate: 0 } : {}}
                transition={{ 
                  duration: shouldReduceMotion ? 0.2 : 0.3, 
                  delay: delay + 0.5 + (i * 0.05) 
                }}
              >
                <Star className="w-3 h-3 fill-yellow-400 text-yellow-400" />
              </motion.div>
            ))}
          </div>
        </motion.div>

        {/* Hover Glow Effect */}
        <AnimatePresence>
          {isHovered && !shouldReduceMotion && (
            <motion.div
              className="absolute inset-0 bg-gradient-to-r from-blue-500/10 to-purple-500/10 rounded-2xl"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              transition={{ duration: 0.3 }}
            />
          )}
        </AnimatePresence>

        {/* Interactive Particles */}
        {isHovered && !shouldReduceMotion && [...Array(6)].map((_, i) => (
          <motion.div
            key={i}
            className="absolute w-1 h-1 bg-blue-400 rounded-full"
            style={{
              left: `${20 + (i * 15)}%`,
              top: `${30 + (i % 2) * 40}%`,
            }}
            animate={{
              y: [-5, 5, -5],
              opacity: [0, 1, 0],
              scale: [0.5, 1, 0.5],
            }}
            transition={{
              duration: 1.5,
              repeat: Infinity,
              delay: i * 0.1,
            }}
          />
        ))}
      </div>
    </m.div>
  );
};

// Futuristic Grid Component
const FuturisticTestimonialsGrid = () => {
  const shouldReduceMotion = useReducedMotion();
  const gridRef = useRef(null);
  const isInView = useInView(gridRef, { once: true, margin: "-50px" });
  
  const first = testimonials.slice(0, 3);
  const second = testimonials.slice(3, 6);
  const third = testimonials.slice(6, 9);
  const fourth = testimonials.slice(9, 12);

  const grid = [first, second, third, fourth];
  
  return (
    <div ref={gridRef} className="relative">
      {/* Grid Background Effect */}
      <div className="absolute inset-0 bg-gradient-to-r from-blue-500/5 via-transparent to-purple-500/5 rounded-3xl blur-3xl" />
      
      <div className="relative grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 max-w-7xl mx-auto">
        {grid.map((testimonialsCol, colIndex) => (
          <motion.div 
            key={`testimonials-col-${colIndex}`} 
            className="grid gap-6"
            initial={{ opacity: 0, y: 50 }}
            animate={isInView ? { opacity: 1, y: 0 } : {}}
            transition={{ 
              duration: shouldReduceMotion ? 0.3 : 0.8, 
              delay: shouldReduceMotion ? 0 : colIndex * 0.1,
              ease: "easeOut"
            }}
          >
            {testimonialsCol.map((testimonial, cardIndex) => (
              <FuturisticCard 
                key={`testimonial-${testimonial.src}-${colIndex}-${cardIndex}`}
                testimonial={testimonial}
                delay={shouldReduceMotion ? 0 : (colIndex * 0.1) + (cardIndex * 0.05)}
              />
            ))}
          </motion.div>
        ))}
      </div>
    </div>
  );
};

// Futuristic Slider Component
const FuturisticTestimonialsSlider = () => {
  const shouldReduceMotion = useReducedMotion();
  const [active, setActive] = useState<number>(0);
  const [autorotate, setAutorotate] = useState<boolean>(true);
  const [isPlaying, setIsPlaying] = useState<boolean>(true);
  const testimonialsRef = useRef<HTMLDivElement>(null);
  const sliderRef = useRef(null);
  const isInView = useInView(sliderRef, { once: true });

  const slicedTestimonials = testimonials.slice(0, 5);

  // Auto-rotation with smooth transitions
  useEffect(() => {
    if (!autorotate || !isPlaying) return;
    const interval = setInterval(() => {
      setActive(prev => (prev + 1) % slicedTestimonials.length);
    }, 5000);
    return () => clearInterval(interval);
  }, [autorotate, isPlaying, slicedTestimonials.length]);

  // Pause on hover
  const handleMouseEnter = useCallback(() => {
    setIsPlaying(false);
  }, []);

  const handleMouseLeave = useCallback(() => {
    setIsPlaying(true);
  }, []);

  return (
    <section 
      ref={sliderRef}
      className="relative"
      onMouseEnter={handleMouseEnter}
      onMouseLeave={handleMouseLeave}
    >
      <div className="max-w-5xl mx-auto relative z-40">
        <div className="relative">
          {/* Futuristic Container */}
          <motion.div
            initial={{ opacity: 0, scale: 0.8 }}
            animate={isInView ? { opacity: 1, scale: 1 } : {}}
            transition={{ duration: shouldReduceMotion ? 0.3 : 1, ease: "easeOut" }}
            className="relative"
          >
            {/* Holographic Background */}
            <div className="absolute inset-0 bg-gradient-to-r from-blue-500/10 via-purple-500/5 to-blue-500/10 rounded-3xl blur-3xl" />
            
            {/* Main Slider Container */}
            <div className="relative bg-gradient-to-br from-gray-900/80 to-black/80 backdrop-blur-xl rounded-3xl border border-gray-700 p-12 overflow-hidden">
              
              {/* Animated Border */}
              <div className="absolute inset-0 rounded-3xl border-2 border-transparent bg-gradient-to-r from-blue-500 to-purple-500 opacity-20"
                   style={{
                     mask: 'linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0)',
                     WebkitMask: 'linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0)',
                     WebkitMaskComposite: 'xor',
                     maskComposite: 'exclude'
                   }} />

              {/* Avatar Section */}
              <div className="text-center mb-12">
                <div className="relative inline-block">
                  {/* Rotating Ring */}
                  <motion.div
                    className="absolute inset-0 w-32 h-32 rounded-full border-2 border-dashed border-blue-500/30"
                    animate={shouldReduceMotion ? {} : { rotate: 360 }}
                    transition={{ duration: 20, repeat: Infinity, ease: "linear" }}
                  />
                  
                  {/* Avatar Container */}
                  <div className="relative w-32 h-32 rounded-full bg-gradient-to-br from-blue-500 to-purple-500 p-1">
                    <div className="w-full h-full rounded-full bg-gray-800 flex items-center justify-center overflow-hidden">
                      <AnimatePresence mode="wait">
                        {slicedTestimonials.map((item, index) => (
                          active === index && (
                            <motion.div
                              key={index}
                              initial={{ opacity: 0, scale: 0.8, rotateY: -90 }}
                              animate={{ opacity: 1, scale: 1, rotateY: 0 }}
                              exit={{ opacity: 0, scale: 0.8, rotateY: 90 }}
                              transition={{ 
                                duration: shouldReduceMotion ? 0.3 : 0.8, 
                                ease: "easeOut" 
                              }}
                              className="w-full h-full flex items-center justify-center text-4xl font-bold bg-gradient-to-br from-blue-500 to-purple-500 bg-clip-text text-transparent"
                            >
                              {item.name.split(' ').map(n => n[0]).join('')}
                            </motion.div>
                          )
                        ))}
                      </AnimatePresence>
                    </div>
                  </div>

                  {/* Floating Particles */}
                  {!shouldReduceMotion && [...Array(8)].map((_, i) => (
                    <motion.div
                      key={i}
                      className="absolute w-2 h-2 bg-blue-400 rounded-full"
                      style={{
                        left: `${50 + Math.cos((i * Math.PI * 2) / 8) * 80}px`,
                        top: `${50 + Math.sin((i * Math.PI * 2) / 8) * 80}px`,
                      }}
                      animate={{
                        scale: [0.5, 1, 0.5],
                        opacity: [0.3, 1, 0.3],
                      }}
                      transition={{
                        duration: 2,
                        repeat: Infinity,
                        delay: i * 0.2,
                      }}
                    />
                  ))}
                </div>
              </div>

              {/* Quote Section */}
              <div className="text-center mb-12 px-8">
                <div className="relative" ref={testimonialsRef}>
                  <AnimatePresence mode="wait">
                    {slicedTestimonials.map((item, index) => (
                      active === index && (
                        <motion.div
                          key={index}
                          initial={{ opacity: 0, y: 30, scale: 0.9 }}
                          animate={{ opacity: 1, y: 0, scale: 1 }}
                          exit={{ opacity: 0, y: -30, scale: 0.9 }}
                          transition={{ 
                            duration: shouldReduceMotion ? 0.3 : 0.6, 
                            ease: "easeOut" 
                          }}
                          className="space-y-6"
                        >
                          {/* Quote Text */}
                          <blockquote className="text-2xl md:text-3xl font-bold text-gray-100 leading-relaxed max-w-4xl mx-auto">
                            <span className="text-blue-400 text-4xl">"</span>
                            {item.quote}
                            <span className="text-blue-400 text-4xl">"</span>
                          </blockquote>
                          
                          {/* Author Info */}
                          <div className="space-y-2">
                            <h4 className="text-xl font-semibold text-blue-400">
                              {item.name}
                            </h4>
                            <p className="text-gray-400">
                              {item.designation}
                            </p>
                          </div>

                          {/* Rating */}
                          <div className="flex justify-center gap-1">
                            {[...Array(5)].map((_, i) => (
                              <motion.div
                                key={i}
                                initial={{ opacity: 0, scale: 0 }}
                                animate={{ opacity: 1, scale: 1 }}
                                transition={{ 
                                  duration: shouldReduceMotion ? 0.2 : 0.3, 
                                  delay: shouldReduceMotion ? 0 : i * 0.1 
                                }}
                              >
                                <Star className="w-6 h-6 fill-yellow-400 text-yellow-400" />
                              </motion.div>
                            ))}
                          </div>
                        </motion.div>
                      )
                    ))}
                  </AnimatePresence>
                </div>
              </div>

              {/* Navigation */}
              <div className="flex justify-center items-center gap-4 flex-wrap">
                {/* Progress Bar */}
                <div className="flex items-center gap-2 mb-4 w-full justify-center">
                  {slicedTestimonials.map((_, index) => (
                    <motion.div
                      key={index}
                      className="relative h-1 bg-gray-700 rounded-full overflow-hidden cursor-pointer"
                      style={{ width: active === index ? '60px' : '20px' }}
                      onClick={() => {
                        setActive(index);
                        setAutorotate(false);
                        setTimeout(() => setAutorotate(true), 10000);
                      }}
                      whileHover={{ scale: shouldReduceMotion ? 1 : 1.1 }}
                    >
                      <motion.div
                        className="absolute left-0 top-0 h-full bg-gradient-to-r from-blue-500 to-purple-500 rounded-full"
                        initial={{ width: 0 }}
                        animate={{ 
                          width: active === index ? '100%' : '0%' 
                        }}
                        transition={{ duration: active === index ? 5 : 0.3 }}
                      />
                    </motion.div>
                  ))}
                </div>

                {/* Navigation Buttons */}
                <div className="flex gap-2">
                  {slicedTestimonials.map((item, index) => (
                    <motion.button
                      key={index}
                      className={cn(
                        "px-4 py-2 rounded-full text-sm font-medium transition-all duration-300 relative overflow-hidden",
                        active === index
                          ? "bg-gradient-to-r from-blue-500 to-purple-500 text-white shadow-lg"
                          : "bg-gray-800 text-gray-400 hover:text-gray-100 border border-gray-700"
                      )}
                      onClick={() => {
                        setActive(index);
                        setAutorotate(false);
                        setTimeout(() => setAutorotate(true), 10000);
                      }}
                      whileHover={{ scale: shouldReduceMotion ? 1 : 1.05 }}
                      whileTap={{ scale: shouldReduceMotion ? 1 : 0.95 }}
                    >
                      <span className="relative z-10">
                        {item.name.split(' ')[0]}
                      </span>
                    </motion.button>
                  ))}
                </div>

                {/* Play/Pause Button */}
                <motion.button
                  className="ml-4 w-12 h-12 rounded-full bg-gradient-to-r from-blue-500 to-purple-500 flex items-center justify-center text-white shadow-lg"
                  onClick={() => setIsPlaying(!isPlaying)}
                  whileHover={{ scale: shouldReduceMotion ? 1 : 1.1 }}
                  whileTap={{ scale: shouldReduceMotion ? 1 : 0.9 }}
                >
                  <motion.div
                    animate={{ rotate: isPlaying ? 0 : 90 }}
                    transition={{ duration: 0.3 }}
                  >
                    {isPlaying ? (
                      <Pause className="w-5 h-5" />
                    ) : (
                      <Play className="w-5 h-5" />
                    )}
                  </motion.div>
                </motion.button>
              </div>
            </div>
          </motion.div>
        </div>
      </div>
    </section>
  );
};

// Main Export Component
const TestimonialsGridWithCenteredCarousel = () => {
  const shouldReduceMotion = useReducedMotion();
  const sectionRef = useRef(null);
  const isInView = useInView(sectionRef, { once: true, margin: "-100px" });
  const [activeParticle, setActiveParticle] = useState(0);

  // Floating particles animation
  useEffect(() => {
    if (!shouldReduceMotion) {
      const interval = setInterval(() => {
        setActiveParticle(prev => (prev + 1) % 20);
      }, 200);
      return () => clearInterval(interval);
    }
  }, [shouldReduceMotion]);

  return (
    <section 
      ref={sectionRef}
      className="relative w-full min-h-screen bg-gradient-to-br from-black via-gray-900 to-black overflow-hidden"
    >
      {/* Futuristic Background Effects */}
      <div className="absolute inset-0 overflow-hidden">
        {/* Animated Grid */}
        <div className="absolute inset-0 bg-[linear-gradient(rgba(59,130,246,0.03)_1px,transparent_1px),linear-gradient(90deg,rgba(59,130,246,0.03)_1px,transparent_1px)] bg-[size:50px_50px] animate-pulse" />
        
        {/* Floating Orbs */}
        {isInView && !shouldReduceMotion && [...Array(8)].map((_, i) => (
          <motion.div
            key={i}
            className="absolute w-2 h-2 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full blur-sm"
            style={{
              left: `${10 + (i * 12)}%`,
              top: `${20 + (i % 3) * 30}%`,
            }}
            animate={{
              y: [-20, 20, -20],
              x: [-10, 10, -10],
              opacity: [0.3, 0.8, 0.3],
              scale: [0.5, 1.2, 0.5],
            }}
            transition={{
              duration: 4 + (i * 0.5),
              repeat: Infinity,
              ease: "easeInOut",
              delay: i * 0.3,
            }}
          />
        ))}

        {/* Particle System */}
        {isInView && !shouldReduceMotion && [...Array(20)].map((_, i) => (
          <motion.div
            key={`particle-${i}`}
            className="absolute w-1 h-1 bg-blue-400 rounded-full"
            style={{
              left: `${Math.random() * 100}%`,
              top: `${Math.random() * 100}%`,
            }}
            animate={{
              opacity: activeParticle === i ? [0, 1, 0] : 0,
              scale: activeParticle === i ? [0, 1.5, 0] : 0,
            }}
            transition={{
              duration: 2,
              ease: "easeOut",
            }}
          />
        ))}

        {/* Radial Gradient Overlay */}
        <div className="absolute inset-0 bg-[radial-gradient(circle_at_50%_50%,transparent_0%,rgba(0,0,0,0.8)_70%)]" />
      </div>

      <div className="relative z-10 max-w-7xl mx-auto px-4 md:px-8 pt-20">
        {/* Futuristic Header */}
        <motion.div
          initial={{ opacity: 0, y: 50 }}
          animate={isInView ? { opacity: 1, y: 0 } : {}}
          transition={{ duration: shouldReduceMotion ? 0.3 : 1, ease: "easeOut" }}
          className="text-center mb-20"
        >
          {/* Stats Bar */}
          <motion.div
            initial={{ opacity: 0, scale: 0.8 }}
            animate={isInView ? { opacity: 1, scale: 1 } : {}}
            transition={{ duration: shouldReduceMotion ? 0.3 : 0.8, delay: shouldReduceMotion ? 0 : 0.2 }}
            className="flex justify-center items-center gap-8 mb-8 flex-wrap"
          >
            {[
              { icon: Users, value: "50+", label: "Happy Clients" },
              { icon: Award, value: "100%", label: "Success Rate" },
              { icon: TrendingUp, value: "5.0", label: "Average Rating" },
            ].map((stat, index) => (
              <motion.div
                key={index}
                className="flex items-center gap-3 px-6 py-3 rounded-full bg-gradient-to-r from-blue-500/10 to-purple-500/10 border border-blue-500/20 backdrop-blur-sm"
                whileHover={{ scale: shouldReduceMotion ? 1 : 1.05, y: shouldReduceMotion ? 0 : -2 }}
                transition={{ duration: 0.3 }}
              >
                <stat.icon className="w-5 h-5 text-blue-400" />
                <div className="text-center">
                  <div className="text-lg font-bold text-gray-100">{stat.value}</div>
                  <div className="text-xs text-gray-400">{stat.label}</div>
                </div>
              </motion.div>
            ))}
          </motion.div>

          {/* Main Title */}
          <motion.div
            initial={{ opacity: 0, y: 30 }}
            animate={isInView ? { opacity: 1, y: 0 } : {}}
            transition={{ duration: shouldReduceMotion ? 0.3 : 0.8, delay: shouldReduceMotion ? 0 : 0.4 }}
            className="relative"
          >
            <h1 className="text-5xl md:text-7xl font-bold bg-gradient-to-r from-gray-100 via-blue-400 to-purple-400 bg-clip-text text-transparent mb-6 leading-tight">
              Trusted by
              <br />
              <span className="relative">
                Visionaries
                {/* Animated underline */}
                <motion.div
                  className="absolute -bottom-2 left-0 h-1 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full"
                  initial={{ width: 0 }}
                  animate={isInView ? { width: "100%" } : {}}
                  transition={{ duration: shouldReduceMotion ? 0.3 : 1.2, delay: shouldReduceMotion ? 0 : 0.8 }}
                />
              </span>
            </h1>
            
            {/* Floating icons */}
            {!shouldReduceMotion && (
              <>
                <motion.div
                  className="absolute -top-4 -right-4 text-blue-400"
                  animate={{ rotate: 360, scale: [1, 1.2, 1] }}
                  transition={{ duration: 8, repeat: Infinity }}
                >
                  <Sparkles className="w-8 h-8" />
                </motion.div>
                <motion.div
                  className="absolute top-1/2 -left-8 text-purple-400"
                  animate={{ y: [-10, 10, -10], rotate: [-10, 10, -10] }}
                  transition={{ duration: 4, repeat: Infinity }}
                >
                  <Zap className="w-6 h-6" />
                </motion.div>
              </>
            )}
          </motion.div>

          <motion.p
            initial={{ opacity: 0, y: 20 }}
            animate={isInView ? { opacity: 1, y: 0 } : {}}
            transition={{ duration: shouldReduceMotion ? 0.3 : 0.6, delay: shouldReduceMotion ? 0 : 0.6 }}
            className="text-xl text-gray-400 max-w-3xl mx-auto leading-relaxed"
          >
            Delivering exceptional results for companies across various industries with 
            <span className="text-blue-400 font-semibold"> cutting-edge technology</span> and 
            <span className="text-purple-400 font-semibold"> innovative solutions</span>.
          </motion.p>
        </motion.div>

        {/* Main Content */}
        <div className="relative">
          <FuturisticTestimonialsSlider />
          <div className="relative mt-20">
            <motion.div
              initial={{ opacity: 0, scale: 0.9 }}
              animate={isInView ? { opacity: 1, scale: 1 } : {}}
              transition={{ duration: shouldReduceMotion ? 0.3 : 1, delay: shouldReduceMotion ? 0 : 0.8 }}
              className="[mask-image:radial-gradient(circle_at_center,transparent_5%,white_25%,white_75%,transparent_95%)]"
            >
              <FuturisticTestimonialsGrid />
            </motion.div>
          </div>
        </div>
      </div>

      {/* Bottom Gradient */}
      <div className="absolute bottom-0 inset-x-0 h-40 w-full bg-gradient-to-t from-black via-black/80 to-transparent" />
    </section>
  );
}

const TestimonialsComponent = TestimonialsGridWithCenteredCarousel;
export default TestimonialsComponent;